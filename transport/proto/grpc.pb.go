// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transport/proto/grpc.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	proto1 "github.com/wollac/autopeering/server/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("transport/proto/grpc.proto", fileDescriptor_fb878c9b4ce03827) }

var fileDescriptor_fb878c9b4ce03827 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x8e, 0x31, 0x0b, 0xc2, 0x30,
	0x10, 0x85, 0x17, 0x15, 0x29, 0xb8, 0x74, 0x10, 0x8c, 0xbf, 0xa1, 0x39, 0xd0, 0xc9, 0x55, 0x74,
	0x17, 0xdc, 0xdc, 0xd2, 0x78, 0xc6, 0x62, 0xdb, 0x3b, 0xae, 0x17, 0xc5, 0x7f, 0xaf, 0x26, 0xba,
	0x38, 0xbd, 0x83, 0xef, 0xdd, 0xc7, 0x2b, 0x8c, 0x8a, 0xeb, 0x07, 0x26, 0x51, 0x60, 0x21, 0x25,
	0x08, 0xc2, 0xde, 0xa6, 0xb3, 0x1c, 0xa7, 0x30, 0xcb, 0x40, 0x14, 0x5a, 0xcc, 0xbc, 0x8e, 0x17,
	0xc0, 0x8e, 0xf5, 0x99, 0x3b, 0x66, 0x31, 0xa0, 0xdc, 0x51, 0xbe, 0xcf, 0xec, 0xfc, 0x0d, 0x35,
	0xa3, 0xd5, 0xa6, 0x98, 0xee, 0x9a, 0xc1, 0xd3, 0x1b, 0x97, 0x55, 0x31, 0x3a, 0x62, 0x7f, 0x2e,
	0x67, 0x99, 0xd9, 0x43, 0x2a, 0x9a, 0xb9, 0xcd, 0x6e, 0xfb, 0x73, 0xdb, 0xfd, 0xc7, 0xbd, 0x85,
	0x53, 0x15, 0x1a, 0xbd, 0xc6, 0xda, 0x7a, 0xea, 0xe0, 0x41, 0x6d, 0xeb, 0x3c, 0xb8, 0xa8, 0xc4,
	0x88, 0xd2, 0xf4, 0x01, 0xfe, 0x56, 0xd7, 0x93, 0x14, 0xeb, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xe0, 0x25, 0x1b, 0xa7, 0xcf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DiscoverClient is the client API for Discover service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiscoverClient interface {
	// send a packet without expecting a response
	Send(ctx context.Context, in *proto1.Packet, opts ...grpc.CallOption) (*empty.Empty, error)
}

type discoverClient struct {
	cc *grpc.ClientConn
}

func NewDiscoverClient(cc *grpc.ClientConn) DiscoverClient {
	return &discoverClient{cc}
}

func (c *discoverClient) Send(ctx context.Context, in *proto1.Packet, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Discover/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoverServer is the server API for Discover service.
type DiscoverServer interface {
	// send a packet without expecting a response
	Send(context.Context, *proto1.Packet) (*empty.Empty, error)
}

// UnimplementedDiscoverServer can be embedded to have forward compatible implementations.
type UnimplementedDiscoverServer struct {
}

func (*UnimplementedDiscoverServer) Send(ctx context.Context, req *proto1.Packet) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterDiscoverServer(s *grpc.Server, srv DiscoverServer) {
	s.RegisterService(&_Discover_serviceDesc, srv)
}

func _Discover_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Packet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoverServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Discover/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoverServer).Send(ctx, req.(*proto1.Packet))
	}
	return interceptor(ctx, in, info, handler)
}

var _Discover_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Discover",
	HandlerType: (*DiscoverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Discover_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/proto/grpc.proto",
}
