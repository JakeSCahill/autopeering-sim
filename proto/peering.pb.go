// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/peering.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("proto/peering.proto", fileDescriptor_6b8b9eff9a131834) }

var fileDescriptor_6b8b9eff9a131834 = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x48, 0x4d, 0x2d, 0xca, 0xcc, 0x4b, 0xd7, 0x03, 0xf3, 0x84, 0x58, 0xc1, 0x94,
	0x94, 0x74, 0x7a, 0x7e, 0x7e, 0x7a, 0x4e, 0xaa, 0x3e, 0x98, 0x97, 0x54, 0x9a, 0xa6, 0x9f, 0x9a,
	0x5b, 0x50, 0x52, 0x09, 0x51, 0x23, 0x25, 0x04, 0xd5, 0x98, 0x98, 0x9c, 0x9d, 0x5a, 0x02, 0x11,
	0x33, 0xb2, 0xe0, 0x62, 0x0f, 0x80, 0x18, 0x24, 0xa4, 0xcb, 0xc5, 0x12, 0x9c, 0x9a, 0x97, 0x22,
	0xc4, 0x0b, 0x91, 0xd2, 0x0b, 0x00, 0xab, 0x93, 0x12, 0xd3, 0x83, 0x98, 0xa9, 0x07, 0x33, 0x53,
	0xcf, 0x15, 0x64, 0xa6, 0x93, 0x6a, 0x94, 0x72, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72,
	0x7e, 0xae, 0x7e, 0x79, 0x7e, 0x4e, 0x4e, 0x62, 0xb2, 0x7e, 0x62, 0x69, 0x49, 0x3e, 0xd4, 0x61,
	0x50, 0x37, 0xb0, 0x81, 0x29, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x73, 0x72, 0x4b, 0xb3,
	0xb6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeeringClient is the client API for Peering service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeeringClient interface {
	// send a packet without expecting a response
	Send(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*empty.Empty, error)
}

type peeringClient struct {
	cc *grpc.ClientConn
}

func NewPeeringClient(cc *grpc.ClientConn) PeeringClient {
	return &peeringClient{cc}
}

func (c *peeringClient) Send(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Peering/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeeringServer is the server API for Peering service.
type PeeringServer interface {
	// send a packet without expecting a response
	Send(context.Context, *Packet) (*empty.Empty, error)
}

// UnimplementedPeeringServer can be embedded to have forward compatible implementations.
type UnimplementedPeeringServer struct {
}

func (*UnimplementedPeeringServer) Send(ctx context.Context, req *Packet) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterPeeringServer(s *grpc.Server, srv PeeringServer) {
	s.RegisterService(&_Peering_serviceDesc, srv)
}

func _Peering_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Packet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeeringServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Peering/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeeringServer).Send(ctx, req.(*Packet))
	}
	return interceptor(ctx, in, info, handler)
}

var _Peering_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Peering",
	HandlerType: (*PeeringServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Peering_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/peering.proto",
}
